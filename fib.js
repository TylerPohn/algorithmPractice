//memoization allows for O(n) time complexity instead of O(2^n)
const fib = (n, memo = {}) => {
  if (n in memo) return memo[n];
  if (n <= 2) return 1;
  memo[n] = fib(n - 1, memo) + fib(n - 2, memo);
  return memo[n];
};

console.log(fib(6));
console.log(fib(7));
console.log(fib(8));
console.log(fib(9));
console.log(fib(10));
console.log(fib(11));
console.log(fib(12));
console.log(fib(13));
console.log(fib(14));
console.log(fib(15));
console.log(fib(16));
console.log(fib(17));
console.log(fib(18));
console.log(fib(19));
console.log(fib(20));
console.log(fib(21));
console.log(fib(22));
console.log(fib(23));
console.log(fib(24));
console.log(fib(25));
console.log(fib(26));
console.log(fib(27));
console.log(fib(28));
console.log(fib(29));
console.log(fib(30));
console.log(fib(31));
console.log(fib(32));
console.log(fib(33));
console.log(fib(34));
console.log(fib(35));
console.log(fib(36));
console.log(fib(37));
console.log(fib(38));
console.log(fib(39));
console.log('@40:');
console.log(fib(40));
console.log(fib(41));
console.log(fib(42));
console.log(fib(43));
console.log(fib(44));
console.log(fib(45));
console.log(fib(46));
console.log(fib(47));
console.log(fib(48));
console.log(fib(49));
